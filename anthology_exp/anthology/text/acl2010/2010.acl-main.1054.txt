                           Optimal rank reduction
        for Linear Context-Free Rewriting Systems with Fan-Out Two

                   Benot Sagot                                         Giorgio Satta
             INRIA & Université Paris 7                    Department of Information Engineering
                Le Chesnay, France                                University of Padua, Italy
            benoit.sagot@inria.fr                                 satta@dei.unipd.it


                      Abstract                                 adjoining languages, LCFRSs with f = 2 can
   Linear Context-Free Rewriting Systems                       also generate languages in which pair of strings
   (LCFRSs) are a grammar formalism ca-                        derived from different nonterminals appear in so-
   pable of modeling discontinuous phrases.                    called crossing configurations. It has recently been
   Many parsing applications use LCFRSs                        observed that, in this way, LCFRSs with f = 2
   where the fan-out (a measure of the dis-                    can model the vast majority of data in discontinu-
   continuity of phrases) does not exceed 2.                   ous phrase structure treebanks and non-projective
   We present an efficient algorithm for opti-                 dependency treebanks (Maier and Lichte, 2009;
   mal reduction of the length of production                   Kuhlmann and Satta, 2009).
   right-hand side in LCFRSs with fan-out at                      Under a theoretical perspective, the parsing
   most 2. This results in asymptotical run-                   problem for LCFRSs with f = 2 is NP-complete
   ning time improvement for known parsing                     (Satta, 1992), and in known parsing algorithms
   algorithms for this class.                                  the running time is exponentially affected by the
                                                               rank r of the grammar. Nonetheless, in natu-
1 Introduction                                                 ral language parsing applications, it is possible to
Linear      Context-Free     Rewriting     Systems             achieve efficient, polynomial parsing if we suc-
(LCFRSs) have been introduced by Vijay-                        ceed in reducing the rank r (number of nontermi-
Shanker et al. (1987) for modeling the syntax                  nals in the right-hand side) of individual LCFRSs’
of natural language. The formalism extends the                 productions (Kuhlmann and Satta, 2009). This
generative capacity of context-free grammars, still            process is called production factorization. Pro-
remaining far below the class of context-sensitive             duction factorization is very similar to the reduc-
grammars. An important feature of LCFRSs is                    tion of a context-free grammar production into
their ability to generate discontinuous phrases.               Chomsky normal form. However, in the LCFRS
This has been recently exploited for modeling                  case some productions might not be reducible to
phrase structure treebanks with discontinuous                  r = 2, and the process stops at some larger value
constituents (Maier and Søgaard, 2008), as well as             for r, which in the worst case might as well be the
non-projective dependency treebanks (Kuhlmann                  rank of the source production (Rambow and Satta,
and Satta, 2009).                                              1999).
   The maximum number f of tuple components                       Motivated by parsing efficiency, the factoriza-
that can be generated by an LCFRS G is called                  tion problem for LCFRSs with f = 2 has at-
the fan-out of G, and the maximum number r of                  tracted the attention of many researchers in recent
nonterminals in the right-hand side of a production            years. Most of the literature has been focusing on
is called the rank of G. As an example, context-               binarization algorithms, which attempt to find a re-
free grammars are LCFRSs with f = 1 and r                      duction to r = 2 and return a failure if this is not
given by the maximum length of a production                    possible. Gómez-Rodrı́guez et al. (2009) report a
right-hand side. Tree adjoining grammars (Joshi                general binarization algorithm for LCFRS which,
and Levy, 1977) can also be viewed as a special                in the case of f = 2, works in time O(|p|7 ), where
kind of LCFRS with f = 2, since each auxil-                    |p| is the size of the input production. A more ef-
iary tree generates two strings, and with r given              ficient binarization algorithm for the case f = 2 is
by the maximum number of adjunction and sub-                   presented in (Gómez-Rodrı́guez and Satta, 2009),
stitution sites in an elementary tree. Beyond tree             working in time O(|p|).


                                                         525
        Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 525–533,
                 Uppsala, Sweden, 11-16 July 2010. c 2010 Association for Computational Linguistics


   In this paper we are interested in general factor-                         where ρ(p) ≥ 0, A and Bi , 1 ≤ i ≤ ρ(p), are non-
ization algorithms, i.e., algorithms that find factor-                        terminal symbols, and g is a linear regular func-
izations with the smallest possible rank (not nec-                            tion having rank ρ(p) and fan-out ϕ(A), defined
essarily r = 2). We present a novel technique that                            on (ΣT∗ )ϕ(B1 ) × · · · × (ΣT∗ )ϕ(Bρ(p) ) and taking val-
solves the general factorization problem in time                              ues in (ΣT∗ )ϕ(A) . The basic idea underlying the
O(|p|2 ) for LCFRSs with f = 2.                                               rewriting relation associated with LCFRS is that
   Strong generative equivalence results between                              production p applies to any sequence of string tu-
LCFRS and other finite copying parallel rewrit-                               ples generated by the Bi ’s, and provides a new
ing systems have been discussed in (Weir, 1992)                               string tuple in (ΣT∗ )ϕ(A) obtained through function
and in (Rambow and Satta, 1999). Through these                                g. We say that ϕ(p) = ϕ(A) is the fan-out of p,
equivalence results, we can transfer the factoriza-                           and ρ(p) is the rank of p.
tion techniques presented in this article to other                            Example 1 Let L be the language L =
finite copying parallel rewriting systems.                                    {an bn am bm an bn am bm | n, m ≥ 1}. A LCFRS
                                                                              generating L is defined by means of the nonter-
2 LCFRSs
                                                                              minals S, ϕ(S) = 1, and A, ϕ(A) = 2, and the
In this section we introduce the basic notation for                           productions in figure 1. Observe that nonterminal
LCFRS and the notion of production factoriza-                                 A generates all tuples of the form han bn , an bn i. 2
tion.                                                                            Recognition and parsing for a given LCFRS
2.1     Definitions                                                           can be carried out in polynomial time on the length
                                                                              of the input string. This is usually done by exploit-
Let ΣT be a finite alphabet of terminal symbols.                              ing standard dynamic programming techniques;
As usual, ΣT∗ denotes the set of all finite strings                           see for instance (Seki et al., 1991).1 However, the
over ΣT , including the empty string ε. For in-                               polynomial degree in the running time is a mono-
teger k ≥ 1, (ΣT∗ )k denotes the set of all tuples                            tonically strictly increasing function that depends
(w1 , . . . , wk ) of strings wi ∈ ΣT∗ . In what follows                      on both the rank and the fan-out of the productions
we are interested in functions mapping several tu-                            in the grammar. To optimize running time, one can
ples of strings in ΣT∗ into tuples of strings in ΣT∗ .                        then recast the source grammar in such a way that
Let r and f be two integers, r ≥ 0 and f ≥ 1.                                 the value of the above function is kept to a min-
We say that a function g has rank r if there exist                            imum. One way to achieve this is by factorizing
integers fi ≥ 1, 1 ≤ i ≤ r, such that g is defined                            the productions of a LCFRS, as we now explain.
on (ΣT∗ )f1 × (ΣT∗ )f2 × · · · × (ΣT∗ )fr . We also say
that g has fan-out f if the range of g is a subset of                         2.2 Factorization
(ΣT∗ )f . Let yh , xij , 1 ≤ h ≤ f , 1 ≤ i ≤ r and                            Consider a LCFRS production of the form
1 ≤ j ≤ fi , be string-valued variables. A func-                              p : A → g(B1 , B2 , . . . , Bρ(p) ), where g is
tion g as above is said to be linear regular if it is                         specified as in (1). Let also C be a subset of
defined by an equation of the form                                            {B1 , B2 , . . . , Bρ(p) } such that |C| =  6 0 and |C| = 6
      g(hx11 , . . . , x1f1 i, . . . , hxr1 , . . . , xrfr i) =               ρ(p). We let ΣC be the alphabet of all variables
                                                                              xij defined as in (1), for all values of i and j such
          = hy1 , . . . , yf i,                                   (1)
                                                                              that Bi ∈ C and 1 ≤ j ≤ fi . For each i with
where hy1 , . . . , yf i represents some grouping into                        1 ≤ i ≤ f , we rewrite each string yi in (1) in a
                                                                                              ′ z y′ · · · y′           ′
f sequences of all and only the variables appear-                             form yi = yi0       i1 i1     idi−1 zidi yidi , with di ≥ 0,
ing in the left-hand side of (1) (without repeti-                             such that the following conditions are all met:
tions) along with some additional terminal sym-                                  • each zij , 1 ≤ j ≤ di , is a string with one or
bols (with possible repetitions).                                                  more occurrences of variables, all in ΣC ;
   For a mathematical definition of LCFRS we re-
                                                                                          ′ , 1 ≤ j ≤ d − 1, is a non-empty
                                                                                 • each yij
fer the reader to (Weir, 1992, p. 137). Informally,                                                      i
in a LCFRS every nonterminal symbol A is asso-                                     string with no occurrences of symbols in ΣC ;
ciated with an integer ϕ(A) ≥ 1, called its fan-out,                                ′ and y ′ are (possibly empty) strings with
                                                                                 • y0j      0di
and it generates tuples in (ΣT∗ )ϕ(A) . Productions
                                                                                   no occurrences of symbols in ΣC .
in a LCFRS have the form
                                                                                 1
                                                                                   In (Seki et al., 1991) a syntactic variant of LCFRS is
            p : A → g(B1 , B2 , . . . , Bρ(p) ),                              used, called multiple context-free grammars.


                                                                        526


                             S → gS (A, A), gS (hx11 , x12 i, hx21 , x22 i) = hx11 x21 x12 x22 i;
                             A → gA (A),    gA (hx11 , x12 i) = hax11 b, ax12 bi;
                                  ′ (),
                             A → gA          ′ () = hab, abi.
                                            gA


                    Figure 1: A LCFRS for language L = {an bn am bm an bn am bm | n, m ≥ 1}.


  Let c = |C| and c = ρ(p) − |C|. Assume that                                        improvement of the running time of existing dy-
C = {Bh1 , . . . , Bhc }, and {B1 , . . . , Bρ(p) } − C =                            namic programming algorithms for parsing based
{Bh′1 , . . . , Bhc′ }. We introduce a fresh nontermi-                               on LCFRS.
                            Pf                                                          The factorization technique we have discussed
nal C with ϕ(C) =              i=1 di and replace pro-
duction p in our grammar by means of the two                                         can also be viewed as a generalization of well-
new productions p1 : C → g1 (Bh1 , . . . , Bhc ) and                                 known techniques for casting context-free gram-
p2 : A → g2 (C, Bh′1 , . . . , Bhc′ ). Functions g1 and                              mars into binary forms. These are forms where no
g2 are defined as:                                                                   more than two nonterminal symbols are found in
                                                                                     the right-hand side of productions of the grammar;
 g1 (hxh1 1 , . . . , xh1 fh1 i, . . . , hxhc 1 , . . . , xhc fhc i)                 see for instance (Harrison, 1978). One important
    = hz11 , · · · , z1d1 , z21 , · · · , zf df i;                                   difference is that, while production factorization
 g2 (hxh′1 1 , . . . , xh′1 fh′ i, . . . , hxhc′ 1 , . . . , xh′c fh′ i)             into binary form is always possible in the context-
                              1                                    c
        ′ , . . . , y ′ , y ′ , . . . , y ′ i.
    = hy10                                                                           free case, for LCFRS there are worst case gram-
                     1d1 20              f df
                                                                                     mars in which rank reduction is not possible at all,
Note that productions p1 and p2 have rank strictly                                   as shown in (Rambow and Satta, 1999).
smaller than the source production p. Further-
more, if Pit is possible to choose set C in such a                                   3 A graph-based representation for
way that fi=0 di ≤ f , then the fan-out of p1 and                                      LCFRS productions
p2 will be no greater than the fan-out of p.                                         Rather than factorizing LCFRS productions di-
   We can iterate the procedure above as many                                        rectly, in this article we work with a more abstract
times as possible, under the condition that the fan-                                 representation of productions based on graphs.
out of the productions does not increase.                                            From now on we focus on LCFRS whose non-
Example 2 Let us consider the following produc-                                      terminals and productions all have fan-out smaller
tion with rank 4:                                                                    than or equal to 2. Consider then a production p :
                                                                                     A → g(B1 , B2 , . . . , Bρ(p) ), with ϕ(A), ϕ(Bi ) ≤
 A → gS (B, C, D, E),
                                                                                     2, 1 ≤ i ≤ ρ(p), and with g defined as
   gA (hx11 , x12 i, hx21 , x22 i, hx31 , x32 i, hx41 , x42 i)
     = hx11 x21 x31 x41 x12 x42 , x22 x32 i.                                                   g(hx11 , . . . , x1ϕ(B1 ) i, . . .
Applyng the above procedure twice, we obtain a                                                   . . . , hxρ(p)1 , . . . , xρ(p)ϕ(Bρ(p) ) i)
factorization consisting of three productions with                                               = hy1 , . . . , yϕ(A) i.
rank 2 (variables have been renamed to reflect our
                                                                                     In what follows, if ϕ(A) = 1 then hy1 , . . . , yϕ(A) i
conventions):
                                                                                     should be read as hy1 i and y1 · · · yϕ(A) should be
 A → gA (A1 , A2 ),                                                                  read as y1 . The same convention applies to all
   gA (hx11 , x12 i, hx21 , x22 i)                                                   other nonterminals and tuples.
     = hx11 x21 x12 , x22 i;                                                            We now introduce a special kind of undirected
 A1 → gA1 (B, E),                                                                    graph that is associated with a linear order defined
   gA1 (hx11 , x12 i, hx21 , x22 i) = hx11 , x21 x12 x22 i;                          over the set of its vertices. The p-graph associated
 A2 → gA2 (C, D),                                                                    with production p is a triple (Vp , Ep , ≺p ) such that
   gA2 (hx11 , x12 i, hx21 , x22 i) = hx11 x21 , x12 x22 i.
                                                                                        • Vp = {xij | 1 ≤ i ≤ ρ(p), ϕ(Bi ) = 2, 1 ≤
                                                                           2
                                                                                          j ≤ ϕ(Bi )} is a set of vertices;2
   The factorization procedure above should be ap-                                      2
                                                                                          Here we are overloading symbols xij . It will always be
plied to all productions of a LCFRS with rank                                        clear from the context whether xij is a string-valued variable
larger than two. This might result in an asymptotic                                  or a vertex in a p-graph.


                                                                               527


  • Ep = {(xi1 , xi2 ) | xi1 , xi2 ∈ Vp } is a set of                   A set of edges E ⊆ Ep is called a bundle with
    undirected edges;                                                fan-out one if V (E) = [x1 , x2 ] for some x1 , x2 ∈
                                                                     Vp , i.e., V (E) is a range. Set E is called a bundle
  • for x, x′ ∈ Vp , x ≺p x′ if x 6= x′ and the
                                                                     with fan-out two if V (E) = [x1 , x2 ] ∪ [x3 , x4 ] for
    (unique) occurrence of x in y1 · · · yϕ(A) pre-
                                                                     some x1 , x2 , x3 , x4 ∈ Vp , and ([x1 , x2 ], [x3 , x4 ])
    cedes the (unique) occurrence of x′ .
                                                                     is a tandem. Note that if E is a bundle with fan-out
Note that in the above definition we are ignor-                      two with V (E) = [x1 , x2 ] ∪ [x3 , x4 ], then neither
ing all string-valued variables xij associated with                  E([x1 , x2 ]) nor E([x3 , x4 ]) are bundles with fan-
nonterminals Bi with ϕ(Bi ) = 1. This is be-                         out one, since there is at least one edge incident
cause nonterminals with fan-out one can always                       upon a vertex in [x1 , x2 ] and a vertex in [x3 , x4 ].
be treated as in the context-free grammar case, as                   We also use the term bundle to denote a bundle
it will be explained later.                                          with fan-out either one or two.
Example 3 The p-graph associated with the                               Intuitively, in a p-graph associated with a
LCFRS production in Example 2 is shown in Fig-                       LCFRS production p, a bundle E with fan-out f
ure 2. Circled sets of edges indicate the factoriza-                 and with |E| > 1 identifies a set of nonterminals
tion in that example.                             2
                                                                     C in the right-hand side of p that can be factorized
                                                                     into a new production. The nonterminals in C are
                                                                     then replaced in p by a fresh nonterminal C with
            A1                                                       fan-out f , as already explained. Our factorization
                                    D         C
                                                        A2           algorithm is based on efficient methods for the de-
        B                      E                                     tection of bundles with fan-out one and two.

  x11       x21   x31   x41   x12       x42       x22    x32         4 The algorithm
                                                                     In this section we provide an efficient, recursive
Figure 2: The p-graph associated with the LCFRS
                                                                     algorithm for the decomposition of a p-graph into
production in Example 2.
                                                                     bundles, which corresponds to factorizing the rep-
   We close this section by introducing some ad-                     resented LCFRS production.
ditional notation related to p-graphs that will be
                                                                     4.1 Overview of the algorithm
used throughout this paper. Let E ⊆ Ep be some
set of edges. The cover set for E is defined as                      The basic idea underlying our graph-based algo-
V (E) = {x | (x, x′ ) ∈ E} (recall that our edges                    rithm can be described as follows. We want to
are unordered pairs, so (x, x′ ) and (x′ , x) denote                 compute an optimal hierarchical decomposition of
the same edge). Conversely, let V ⊆ Vp be some                       an input bundle with fan-out 1 or 2. This decom-
set of vertices. The incident set for V is defined                   position can be represented by a tree, in which
as E(V ) = {(x, x′ ) | (x, x′ ) ∈ Ep , x ∈ V }.                      each node N corresponds to a bundle (the root
   Assume ϕ(p) = 2, and let x1 , x2 ∈ Vp . If x1                     node corresponds to the input bundle) and the
and x2 do not occur both in the same string y1 or                    daughters of N represent the bundles in which N
y2 , then we say that there is a gap between x1 and                  is immediately decomposed. The decomposition
x2 . If x1 ≺p x2 and there is no gap between x1                      is optimal in so far as the maximum arity of the
and x2 , then we write [x1 , x2 ] to denote the set                  decomposition tree is as small as possible. As
{x1 , x2 } ∪ {x | x ∈ Vp , x1 ≺p x ≺p x2 }. For x ∈                  already explained above, this decomposition rep-
Vp we also let [x, x] = {x}. A set [x, x′ ] is called a              resents a factorization of some production p of a
range. Let r and r ′ be two ranges. The pair (r, r ′ )               LCFRS, resulting in optimal rank reduction. All
is called a tandem if the following conditions are                   the internal nodes in the decomposition represent
both satisfied: (i) r∪r ′ is not a range, and (ii) there             fresh nonterminals that will be created during the
exists some edge (x, x′ ) ∈ Ep with x ∈ r and                        factorization process.
x′ ∈ r ′ . Note that the first condition means that r                   The construction of the decomposition tree is
and r ′ are disjoint sets and, for any pair of vertices              carried out recursively. For a given bundle with
x ∈ r and x′ ∈ r ′ , either there is a gap between x                 fan-out 1 or 2, we apply a procedure for decom-
and x′ or else there exists some xg ∈ Vp such that                   posing this bundle in its immediate sub-bundles
x ≺p xg ≺p x′ and xg 6∈ r ∪ r ′ .                                    with fan-out 1 or 2, in an optimal way. Then,


                                                               528


we recursively apply our procedure to the obtained             we write r.lb.right = max(R(Br )). If Br = ∅,
sub-bundles. Recursion stops when we reach bun-                then we set r.lb.left = r.lb.right = ⊥.
dles containing only one edge (which correspond                    We define forward and local forward quanti-
to the nonterminals in the right-hand side of the              ties in a symmetrical way.
input production). We shall prove that the result is               The backward quantities r.b.left and r.b.right
an optimal decomposition.                                      and the local backward quantities r.lb.left and
   The procedure for computing an optimal de-                  r.lb.right for all ranges r in the p-graph can
composition of a bundle F into its immediate sub-              be computed efficiently as follows. We process
bundles, which we describe in the first part of this           ranges in increasing order of size, expanding each
section, can be sketched as follows. First, we iden-           range r by one unit at a time by adding a new
tify and temporarily remove all maximal bundles                vertex at its right. Backward and local backward
with fan-out 1 (Section 4.3). The result is a new              quantities for the expanded range can be expressed
bundle F ′ which is a subset of the original bundle,           as a function of the same quantities for r. There-
and has the same fan-out. Next, we identify all                fore if we store our quantities for previously pro-
sub-bundles with fan-out 2 in F ′ (Section 4.4). We            cessed ranges, each new range can be annotated
compute the optimal decomposition of F ′ , rest-               with the desired quantities in constant time. This
ing on the hypothesis that there are no sub-bundles            algorithm runs in time O(n2 ), where n is the num-
with fan-out 1. Each resulting sub-bundle is later             ber of vertices in Vp . This is an optimal result,
expanded with the maximal sub-bundles with fan-                since O(n2 ) is also the size of the output.
out 1 that have been previously removed. This re-                  We compute in a similar way the forward quan-
sults in a “first level” decomposition of the original         tities r.f .left and r.f .right and the local forward
bundle F . We then recursively decompose all in-               quantities r.lf .left and r.lf .right , this time ex-
dividual sub-bundles of F , including the bundles              panding each range by one unit at its left.
with fan-out 1 that have been later attached.
                                                               4.3 Bundles with fan-out one
4.2   Backward and forward quantities
                                                               The detection of bundles with fan-out 1 within the
For a set V ⊆ Vp of vertices, we write max(V )                 p-graph can be easily performed in O(n2 ), where
(resp. min(V )) the maximum (resp. minimum)                    n is the number of its vertices. Indeed, the incident
vertex in V w.r.t. the ≺p total order.                         set E(r) of a range r is a bundle with fan-out one
   Let r = [x1 , x2 ] be a range. We write r.left =            if and only if r.b.left = r.f .left = ⊥. This imme-
x1 and r.right = x2 . The set of backward edges                diately follows from the definitions given in Sec-
for r is defined as Br = {(x, x′ ) | (x, x′ ) ∈                tion 4.2. It is therefore possible to check all ranges
Er , x ≺p r.left, x′ ∈ r}. The set of for-                     the one after the other, once the backward and
ward edges for r is defined symmetrically as Fr =              forward properties have been computed. These
{(x, x′ ) | (x, x′ ) ∈ Er , x ∈ r, r.right ≺p                  checks take constant time for each of the Θ(n2 )
x′ }. For E ∈ {Br , Fr } we also define L(E) =                 ranges, hence the quadratic complexity.
{x | (x, x′ ) ∈ E, x ≺p x′ } and R(E) =                           We now remove from F all bundles with fan-out
{x′ | (x, x′ ) ∈ E, x ≺p x′ }.                                 1 from the original bundle F . The result is the new
   Let us assume Br 6= ∅. We write r.b.left =                  bundle F ′ , that has no sub-bundles with fan-out 1.
min(L(Br )). Intuitively, r.b.left is the leftmost
vertex of the p-graph that is located at the left              4.4 Bundles with fan-out two
of range r and that is connected to some ver-                  Efficient detection of bundles with fan-out two in
tex in r through some edge. Similarly, we write                F ′ is considerably more challenging. A direct gen-
r.b.right = max(L(Br )). If Br = ∅, then we set                eralization of the technique proposed for detecting
r.b.left = r.b.right = ⊥. Quantities r.b.left and              bundles with fan-out 1 would use the following
r.b.right are called backward quantities.                      property, that is also a direct corollary of the def-
   We also introduce local backward quanti-                    initions in Section 4.2: the incident set E(r ∪ r ′ )
ties, defined as follows. We write r.lb.left =                 of a tandem (r, r ′ ) is a bundle with fan-out two if
min(R(Br )). Intuitively, r.lb.left is the leftmost            and only if all of the following conditions hold:
vertex among all those vertices in r that are con-             (i) r.b.left = r ′ .f .left = ⊥, (ii) r.f .left ∈ r ′ ,
nected to some vertex to the left of r. Similarly,             r.f .right ∈ r ′ , (iii) r ′ .b.left ∈ r, r ′ .b.right ∈ r.


                                                         529


However, checking all O(n4 ) tandems the one af-                    Now that we have extracted all bundles, we
ter the other would require time O(n4 ). Therefore,              need to extract an optimal decomposition of the in-
preserving the quadratic complexity of the overall               put bundle F ′ , i.e., a minimal size partition of all
algorithm requires a more complex representation.                n elements (edges) in the input bundle such that
   From now on, we assume that Vp =                              each of these partition is a bundle (with fan-out 2,
{x1 , . . . , xn }, and we write [i, j] as a shorthand           since bundles with fan-out 1 are excluded, except
for the range [xi , xj ].                                        for the input bundle). By definition, a partition has
   First, we need to compute an additional data                  minimal size if there is no other partition it is a
structure that will store local backward figures in              refinment of.3
a convenient way. Let us define the expansion ta-
                                                                 4.5 Extracting an optimal decomposition
ble T as follows: for a given range r ′ = [i′ , j ′ ],
T (r ′ ) is the set of all ranges r = [i, j] such that           We have constructed the set of all (fan-out 2) sub-
r.lb.lef t = i′ and r.lb.right = j ′ , ordered by in-            bundles of F ′ . We now need to build one optimal
creasing left boundary i. It turns out that the con-             decomposition of F ′ into sub-bundles. We need
struction of such a table can be achieved in time                some more theoretical results on the properties of
O(n2 ). Moreover, it is possible to compute in                   bundles.
O(n2 ) an auxiliary table T ′ that associates with r             Lemma 1 Let E1 and E2 be two sub-bundles of
the first range r ′′ in T ([r.f.lef t, r.f.right]) such          F ′ (with fan-out 2) that have non-empty intersec-
that r ′′ .b.right ≥ r. Therefore, either (r, T ′ (r))           tion, but that are not included the one in the other.
anchors a valid bundle, or there is no bundle E                  Then E1 ∪ E2 is a bundle (with fan-out 2).
such that the first component of V (E) is r.
                                                                 P ROOF This lemma can be proved by considering
   We now have all the pieces to extract bundles                 all possible respective positions of the covers of
with fan-out 2 in time O(n2 ). We proceed as fol-                E1 and E2 , and discarding all situations that would
lows. For each range r = [i, j]:                                 lead to the existence of a fan-out 1 sub-bundle. 
  • We first retrieve r ′ = [r.f.lef t, r.f.right] in            Theorem 1 For any bundle E, either it has at
    constant time.                                               least one binary decomposition, or all its decom-
                                                                 positions are refinements of a unique optimal one.
  • Then, we check in constant time whether                      P ROOF Let us suppose that E has no bi-
    r ′ .b.lef t lies within r. If it doesn’t, r is not          nary decomposition. Its cover corresponds to
    the first part of a valid bundle with fan-out 2,             the tandem (r, r ′ ) = ([i, j], [i′ , j ′ ]).             Let
    and we move on to the next range r.                          us consider two different decompositions of
                                                                 E, that correspond respectively to decomposi-
  • Finally, for each r ′′ in the ordered set                    tions of the range r in two sets of sub-ranges
    T (r ′ ), starting with T ′ (r), we check whether            of the form [i, k1 ], [k1 + 1, k2 ], . . . , [km , j] and
    r ′′ .b.right is inside r. If it is not, we stop and         [i, k1′ ], [k1′ + 1, k2′ ], . . . , [km
                                                                                                       ′ , j]. For simplifying
                                                                                                         ′
    move on to the next range r. If it is, we out-               the notations, we write k0 = k0′ = i and km+1 =
    put the valid bundle (r, r ′′ ) and move on to               km′ +1 = j. Since k0 = k0′ , there exist an in-
    the next element in T (r ′ ). Indeed, in case of             dex p > 0 such that for any l < p, kl = kl′ , but
    a failure, the backward edge that relates a ver-             kp 6= kp′ : p is the index that identifies the first
    tex in r ′′ with a vertex outside r will still be            discrepancy between both decomposition. Since
    included in all further elements in T (r ′ ) since           km+1 = km′ +1 , there must exist q ≤ m and
    T (r ′ ) is ordered by increasing left boundary.             q ′ ≤ m′ such that q and q ′ are strictly greater
    This step costs a constant time for each suc-                than p and that are the minimal indexes such that
    cess, and a constant time for the unique fail-               kq = kq′ ′ . By definition, all bundles of the form
    ure, if any.                                                 E[kl−1 ,kl ] (p ≤ l ≤ q) have a non-empty intersec-
                                                                 tion with at least one bundle of the form E[kl−1        ′  ,kl′ ]
   This algorithm spends a constant time on each
range plus a constant time on each bundle with                      3
                                                                     The term “refinement” is used in the usual way concern-
fan-out 2. We shall prove in Section 5 that there                ing partitions, i.e., a partition P1 is a refinement of another
                                                                 one P2 if all constituents in P1 are constituents of P2 , or be-
are O(n2 ) bundles with fan-out 2. Therefore, this               longs to a subset of the partition P1 that is a partition of one
algorithm runs in time O(n2 ).                                   element of P2 .


                                                           530


(p ≤ l ≤ q ′ ). The reverse is true as well. Ap-                     cover of the form [i, k]∪[i′ , k′ ] or [i, k]∪[k′ + 1, j].
plying Lemma 1, this shows that E([kp+1 , kq ]) is                   This means that r ′ is decomposed by E(r ′′ ) in
a bundle with fan-out 2. Therefore, by replacing                     only 2 ranges, namely the right component of
all ranges involved in this union in one decom-                      E(r ′′ )’s cover and another range, that we can call
position or the other, we get a third decomposi-                     r ′′′ . Since r \ r ′′ = [k + 1, j] may not anchor
tion for which the two initial ones are strict refine-               a bundle with fan-out 1, it must contain at least
ments. This is a contradiction, which concludes                      one crossing edge. All such edges necessarily fall
the proof.                                                          within r ′′′ . Conversely, any crossing edge that
                                                                     falls inside r ′′′ necessarily has its other end inside
Lemma 2 Let E = V (r ∪ r ′ ) be a bundle, with
                                                                     [k + 1, j]. Which means that E(r ′′ ) and E(r ′′′ )
r = [i, j]. We suppose it has a unique (non-binary)
                                                                     form a binary decomposition of E. Therefore, by
optimal decomposition, which decomposes [i, j]
                                                                     definition of k1 , k = k1 .
into [i, k1 ], [k1 + 1, k2 ], . . . , [km , j]. There exist
no range r ′′ ⊂ r such that (i) Er′′ is a bundle and                      Second, let us suppose that r is decomposed
(ii) ∃l, 1 ≤ l ≤ m such that [kl , kl+1 ] ⊂ r ′′ .                   into 3 sub-ranges by the selected original decom-
                                                                     position (therefore, r ′ is not decomposed by this
P ROOF Let us consider a range r ′′ that would con-                  decomposition). This means that this decompo-
tradict the lemma. The union of r ′′ and of the                      sition involves a bundle with a cover of the form
ranges in the optimal decomposition that have a                      [i, k1 ]∪[k2 + 1, j] and another bundle with a cover
non-empty intersection with r ′′ is a fan-out 2 bun-                 of the form [k1 + 1, k2 ] ∪ r ′ (this bundle is in fact
dle that includes at least two elements of the opti-                 E(r ′ )). If k ≥ k2 , then the left range of both mem-
mal decomposition, but that is strictly included in                  bers of the original decomposition are included in
E because the decomposition is not binary. This                      r ′′ , which means that E(r ′′ ) = E, and therefore
is a contradiction.                                                 r ′′ = r which is excluded. Note that k is at least
Lemma 3 Let E = V (r, r ′ ) be a bundle, with r =                    as large as k1 (since [i, k1 ] is a valid “range start-
[i, j]. We suppose it has a binary (optimal) decom-                  ing in i such that k < j and such that it anchors
position (not necessarily unique). Let r ′′ = [i, k]                 a bundle”). Therefore, we have k1 ≤ k < k2 .
be the largest range starting in i such that k < j                   Therefore, E([i, k1 ]) ⊂ E(r ′′ ), which means that
and such that it anchors a bundle, namely E(r ′′ ).                  all edges anchored inside [k2 + 1, j]) are included
Then E(r ′′ ) and E([k + 1, j]) form a binary de-                    in E(r ′′ ). Hence, E(r ′′ ) can not be a crossing bun-
composition of E.                                                    dle without having a left component that is [i, j],
                                                                     which is excluded (it would mean E(r ′′ ) = E).
P ROOF We need to prove that E([k + 1, j]) is a                      This means that E(r ′′ ) is a bundle with a cover
bundle. Each (optimal) binary decomposition of                       of the form [i, k] ∪ [k′ + 1, j]. Which means
E decomposes r in 1, 2 or 3 sub-ranges. If no opti-                  that E(r ′ ) is in fact the bundle whose cover is
mal decomposition decomposes r in at least 2 sub-                    [k + 1, k′ + 1] ∪ r ′ . Hence, E(r ′′ ) and E(r ′ ) form
ranges, then the proof given here can be adapted                     a binary decomposition of E. Hence, by definition
by reasoning on r ′ instead of r. We now sup-                        of k1 , k = k1 .                                        
pose that at least one of them decomposes r in at
least 2 sub-ranges. Therefore, it decomposes r in                       As an immediate consequence of Lemmas 2
[i, k1 ] and [k1 + 1, j] or in [i, k1 ], [k1 + 1, k2 ] and           and 3, our algorithm for extracting the optimal de-
[k2 + 1, j]. We select one of these optimal decom-                   composition for F ′ consists in applying the fol-
position by taking one such that k1 is maximal.                      lowing procedure recursively, starting with F ′ ,
We shall now distinguish between two cases.                          and repeating it on each constructed sub-bundle E,
    First, let us suppose that r is decomposed                       until sub-bundles with only one edge are reached.
into two sub-ranges [i, k1 ] and [k1 + 1, j] by                         Let E = E(r, r ′ ) be a bundle, with r = [i, j].
the selected optimal decomposition. Obviously,                       One optimal decomposition of E can be obtained
E([i, k1 ]) is a “crossing” bundle, i.e., the right                  as follows. One selects the bundle with a left com-
component of its cover is is a sub-range of r ′ .                    ponent starting in i and with the maximum length,
Since r is decomposed in two sub-ranges, it is                       and iterating this selection process until r is cov-
necessarily the same for r ′ . Therefore, E([i, k1 ])                ered. The same is done with r ′ . We retain the opti-
has a cover of the form [i, k1 ] ∪ [i′ , k1′ ] or [i, k1 ] ∪         mal among both resulting decompositions (or one
[k1′ + 1, j]. Since r ′′ includes [i, k1 ], E(r ′′ ) has a           of them if they are both optimal). Note that this


                                                               531


decomposition is unique if and only if it has four              Let E denote the set of all bundles (with fan-out
components or more; it can not be ternary; it may               two) in our p-graph. The e-graph associated with
be binary, and in this case it may be non-unique.               our LCFRS production p is the directed graph
   This algorithm gives us a way to extract an op-              with vertices E and edges defined by the relation
timal decomposition of F ′ in linear time w.r.t. the            →. For E ∈ E, we let out(E) = {E ′ | E → E ′ }
number of sub-bundles in this optimal decomposi-                and in(E) = {E ′ | E ′ → E}.
tion. The only required data structure is, for each                Lack of space prevents us from providing the
i (resp. k), the list of bundles with a cover of the            proof of the following property. For any E ∈ E
form [i, j] ∪ [k, l] ordered by decreasing j (resp. l).         that contains more than one edge, |out(E)| ≤ 2
This can trivially be constructed in time O(n2 )                and |in(E)| ≥ 2. This allows us to prove our up-
from the list of all bundles we built in time O(n2 )            per bound on the size of E.
in the previous section. Since the number of bun-               Theorem 2 The e-graph associated with an
dles is bounded by O(n2 ) (as mentioned above                   LCFRS production p has at most n2 vertices,
and proved in Section 5), this means we can ex-                 where n is the rank of p.
tract an optimal decomposition for F ′ in O(n2 ).
                                                                P ROOF Consider the e-graph associated with pro-
   Similar ideas apply to the simpler case of the
                                                                duction p, with set of vertices E. For a vertex
decomposition of bundles with fan-out 1.
                                                                E ∈ E, we define the level of E as the number
4.6   The main decomposition algorithm                          |E| of edges in the corresponding bundle from the
                                                                p-graph associated with p. Let d be the maximum
We now have to generalize our algorithm in or-                  level of a vertex in E. We thus have 1 ≤ d ≤ n.
der to handle the possible existence of fan-out 1               We now prove the following claim. For any inte-
bundles. We achieve this by using the fan-out 2                 ger k with 1 ≤ k ≤ d, the set of vertices in E with
algorithm recursively. First, we extract and re-                level k has no more than n elements.
move (maximal) bundles with fan-out 1 from F ,                     For k = 1, since there are no more than n edges
and recursively apply to each of them the com-                  in such a p-graph, the statement holds.
plete algorithm. What remains is F ′ , which is a                  We can now consider all vertices in E with level
set of bundles with no sub-bundles with fan-out 1.              k > 1 (k ≤ d). Let E (k−1) be the set of all ver-
This means we can apply the algorithm presented                 tices in E with level smaller than or equal to k − 1,
above. Then, for each bundle with fan-out 1, we                 and let us call T (k−1) the set of all edges in the e-
group it with a randomly chosen adjacent bundle                 graph that are leaving from some vertex in E (k−1) .
with fan-out 2, which builds an expanded bundle                 Since for each bundle E in E (k−1) we know that
with fan-out 2, which has a binary decomposition                |out(E)| ≤ 2, we have |T (k−1) | ≤ 2|E (k−1) |.
into the original bundle with fan-out 2 and the bun-               The number of vertices in E (k) with level larger
dle with fan-out 1.                                             than one is at least |E (k−1) | − n. Since for each
                                                                E ∈ E (k−1) we know that |in(E)| ≥ 2, we con-
5 Time complexity analysis
                                                                clude that at least 2(|E (k−1) | − n) edges in T (k−1)
In Section 4, we claimed that there are no more                 must end up at some vertex in E (k) . Let T be the
than O(n2 ) bundles. In this section we sketch the              set of edges in T (k−1) that impinge on some ver-
proof of this result, which will prove the quadratic            tex in E \ E (k) . Thus we have |T | ≤ 2|E (k−1) | −
time complexity of our algorithm.                               2(|E (k−1) | − n) = 2n. Since the vertices of level k
   Let us compute an upper bound on the num-                    in E must have incoming edges from set T , and be-
ber of bundles with fan-out two that can be found               cause each of them have at least 2 incoming edges,
within the p-graph processed in Section 4.5, i.e., a            there cannot be more than n such vertices. This
p-graph with no fan-out 1 sub-bundle.                           concludes the proof of our claim.
   Let E, E ′ ⊆ Ep be bundles with fan-out two. If                 Since the the level of a vertex in E is necessarily
E ⊂ E ′ , then we say that E ′ expands E. E ′ is                lower than n, this completes the proof.              
said to immediately expand E, written E → E ′ ,                    The overall complexity of the complete algo-
if E ′ expands E and there is no bundle E ′′ such               rithm can be computed by induction. Our in-
that E ′′ expands E and E ′ expands E ′′ .                      duction hypothesis is that for m < n, the time
   Let us represent bundles and the associated im-              complexity is in O(m2 ). This is obviously true
mediate expansion relation by means of a graph.                 for n = 1 and n = 2. Extracting the bundles


                                                          532


with fan-out 1 costs O(n2 ). These bundles are of                 ence (NAACL’09:HLT), Boulder, Colorado. To ap-
length n1 . . . nm . Extracting bundles with fan-out              pear.
2 costs O((n − n1 − . . . − nm )2 ). Applying re-               Michael A. Harrison. 1978. Introduction to Formal
cursively the algorithm to bundles with fan-out 1                 Language Theory. Addison-Wesley, Reading, MA.
costs O(n21 ) + . . . + O(n2m ). Therefore, the com-
                   2                                            Aravind K. Joshi and Leon S. Levy. 1977. Constraints
Pn is in O(n ) +2O((n −P
plexity                          n1 − . . . − nm )2 ) +           on local descriptions: Local transformations. SIAM
                                  n               2
   i=1 O(ni ) = O(n ) + O( i=1 ni ) = O(n ).                      Journal of Computing

6 Conclusion                                                    Marco Kuhlmann and Giorgio Satta. 2009. Treebank
                                                                 grammar techniques for non-projective dependency
We have introduced an efficient algorithm for opti-              parsing. In Proceedings of the 12th Meeting of the
                                                                 European Chapter of the Association for Computa-
mal reduction of the rank of LCFRSs with fan-out
                                                                 tional Linguistics (EACL 2009), Athens, Greece. To
at most 2, that runs in quadratic time w.r.t. the rank           appear.
of the input grammar. Given the fact that fan-out 1
bundles can be attached to any adjacent bundle in               Wolfgang Maier and Timm Lichte. 2009. Character-
                                                                 izing discontinuity in constituent treebanks. In Pro-
our factorization, we can show that our algorithm                ceedings of the 14th Conference on Formal Gram-
also optimizes time complexity for known tabular                 mar (FG 2009), Bordeaux, France.
parsing algorithms for LCFRSs with fan-out 2.
                                                                Wolfgang Maier and Anders Søgaard. 2008. Tree-
   As for general LCFRS, it has been shown by                    banks and mild context-sensitivity. In Philippe
Gildea (2010) that rank optimization and time                    de Groote, editor, Proceedings of the 13th Confer-
complexity optimization are not equivalent. Fur-                 ence on Formal Grammar (FG 2008), pages 61–76,
thermore, all known algorithms for rank or time                  Hamburg, Germany. CSLI Publications.
complexity optimization have an exponential time                Owen Rambow and Giorgio Satta. 1999. Independent
complexity (Gómez-Rodrı́guez et al., 2009).                      parallelism in finite copying parallel rewriting sys-
                                                                  tems. Theoretical Computer Science, 223:87–120.
Acknowledgments
                                                                Giorgio Satta. 1992. Recognition of linear context-free
Part of this work was done while the second author                rewriting systems. In Proceedings of the 30th Meet-
                                                                  ing of the Association for Computational Linguistics
was a visiting scientist at Alpage (INRIA Paris-                  (ACL’92), Newark, Delaware.
Rocquencourt and Université Paris 7), and was fi-
nancially supported by the hosting institutions.                Hiroyuki Seki, Takashi Matsumura, Mamoru Fujii, and
                                                                  Tadao Kasami. 1991. On multiple context-free
                                                                  grammars. Theoretical Computer Science, 88:191–
                                                                  229.
References
                                                                K. Vijay-Shanker, David J. Weir, and Aravind K. Joshi.
Daniel Gildea. 2010. Optimal parsing strategies for                1987. Characterizing structural descriptions pro-
  linear context-free rewriting systems. In Human                  duced by various grammatical formalisms. In Pro-
  Language Technologies: The 11th Annual Confer-                   ceedings of the 25th Meeting of the Association for
  ence of the North American Chapter of the Associa-               Computational Linguistics (ACL’87).
  tion for Computational Linguistics; Proceedings of
  the Main Conference, Los Angeles, California. To              David J. Weir. 1992. Linear context-free rewriting
  appear.                                                         systems and deterministic tree-walk transducers. In
                                                                  Proceedings of the 30th Meeting of the Association
Carlos Gómez-Rodrı́guez and Giorgio Satta. 2009.                 for Computational Linguistics (ACL’92), Newark,
  An optimal-time binarization algorithm for linear               Delaware.
  context-free rewriting systems with fan-out two. In
  Proceedings of the Joint Conference of the 47th An-
  nual Meeting of the ACL and the 4th International
  Joint Conference on Natural Language Processing
  of the AFNLP, pages 985–993, Suntec, Singapore,
  August. Association for Computational Linguistics.

Carlos Gómez-Rodrı́guez, Marco Kuhlmann, Giorgio
  Satta, and David J. Weir. 2009. Optimal reduc-
  tion of rule length in linear context-free rewriting
  systems. In Proceedings of the North American
  Chapter of the Association for Computational Lin-
  guistics - Human Language Technologies Confer-


                                                          533

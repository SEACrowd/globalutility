                        The Importance of Rule Restrictions in CCG

        Marco Kuhlmann                          Alexander Koller                           Giorgio Satta
    Dept. of Linguistics and Philology            Cluster of Excellence             Dept. of Information Engineering
           Uppsala University                      Saarland University                     University of Padua
            Uppsala, Sweden                      Saarbrücken, Germany                          Padua, Italy




                       Abstract                                  The discussion of the (weak and strong) gener-
                                                              ative capacity of CCG and TAG has recently been
    Combinatory Categorial Grammar (CCG)                      revived (Hockenmaier and Young, 2008; Koller and
    is generally construed as a fully lexicalized             Kuhlmann, 2009). In particular, Koller and Kuhl-
    formalism, where all grammars use one and                 mann (2009) have shown that CCGs that are pure
    the same universal set of rules, and cross-               (i.e., they can only use generalized composition
    linguistic variation is isolated in the lexicon.          rules, and there is no way to restrict the instances
    In this paper, we show that the weak gener-               of these rules that may be used) and first-order
    ative capacity of this ‘pure’ form of CCG is              (i.e., all argument categories are atomic) can not
    strictly smaller than that of CCG with gram-              generate an b n c n . This shows that the generative
    mar-specific rules, and of other mildly con-              capacity of at least first-order CCG crucially relies
    text-sensitive grammar formalisms, includ-                on its ability to restrict rule instantiations, and is at
    ing Tree Adjoining Grammar (TAG). Our                     odds with the general conception of CCG as a fully
    result also carries over to a multi-modal                 lexicalized formalism, in which all grammars use
    extension of CCG.                                         one and the same set of universal rules. A question
                                                              then is whether the result carries over to pure CCG
1   Introduction                                              with higher-order categories.
Combinatory Categorial Grammar (CCG) (Steed-                     In this paper, we answer this question to the pos-
man, 2001; Steedman and Baldridge, 2010) is an                itive: We show that the weak generative capacity of
expressive grammar formalism with formal roots                general pure CCG is still strictly smaller than that
in combinatory logic (Curry et al., 1958) and links           of the formalism considered by Vijay-Shanker and
to the type-logical tradition of categorial grammar           Weir (1994); composition rules can only achieve
(Moortgat, 1997). It has been successfully used for           their full expressive potential if their use can be
a wide range of practical tasks, such as data-driven          restricted. Our technical result is that every lan-
parsing (Hockenmaier and Steedman, 2002; Clark                guage L that can be generated by a pure CCG has
and Curran, 2007), wide-coverage semantic con-                a context-free sublanguage L0  L such that every
struction (Bos et al., 2004), and the modelling of            string in L is a permutation of a string in L0 , and
syntactic priming (Reitter et al., 2006).                     vice versa. This means that an b n c n , for instance,
   It is well-known that CCG can generate lan-                cannot be generated by pure CCG, as it does not
guages that are not context-free (which is neces-             have any (non-trivial) permutation-equivalent sub-
sary to capture natural languages), but can still             languages. Conversely, we show that there are still
be parsed in polynomial time. Specifically, Vijay-            languages that can be generated by pure CCG but
Shanker and Weir (1994) identified a version of               not by context-free grammar.
CCG that is weakly equivalent to Tree Adjoining                  We then show that our permutation language
Grammar (TAG) (Joshi and Schabes, 1997) and                   lemma also holds for pure multi-modal CCG as
other mildly context-sensitive grammar formalisms,            defined by Baldridge and Kruijff (2003), in which
and can generate non-context-free languages such              the use of rules can be controlled through the lex-
as an b n c n . The generative capacity of CCG is com-        icon entries by assigning types to slashes. Since
monly attributed to its flexible composition rules,           this extension was intended to do away with
which allow it to model more complex word orders              the need for grammar-specific rule restrictions, it
that context-free grammar can.                                comes as quite a surprise that pure multi-modal


                                                          534
         Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 534–543,
                  Uppsala, Sweden, 11-16 July 2010. c 2010 Association for Computational Linguistics


CCG in the style of Baldridge and Kruijff (2003) is           x=y y   )   x     forward application                >
still less expressive than the CCG formalism used             y xny   )   x     backward application               <
by Vijay-Shanker and Weir (1994). This means that           x=y y=z   )   x=z   forward harmonic composition       >B
word order in CCG cannot be fully lexicalized with          ynz xny   )   xnz   backward harmonic composition      <B
the current formal tools; some ordering constraints         x=y ynz   )   xnz   forward crossed composition        >B
must be specified via language-specific combina-            y=z xny   )   x=z   backward crossed composition       <B
tion rules and not in lexicon entries. On the other               Figure 1: The core set of rules of CCG.
hand, as pure multi-modal CCG has been success-
fully applied to model the syntax of a variety of
natural languages, another way to read our results          2.2   Rules
is as contributions to a discussion about the exact       The syntactic rules of CCG are directed versions
expressiveness needed to model natural language.          of combinators in the sense of combinatory logic
   The remainder of this paper is structured as fol-      (Curry et al., 1958). Figure 1 lists a core set of
lows. In Section 2, we introduce the formalism            commonly assumed rules, derived from functional
of pure CCG that we consider in this paper, and           application and the B combinator, which models
illustrate the relevance of rule restrictions. We then    functional composition. When talking about these
study the generative capacity of pure CCG in Sec-         rules, we refer to the premise containing the argu-
tion 3; this section also presents our main result. In    ment jy as the primary premise, and to the other
Section 4, we show that this result still holds for       premise as the secondary premise of the rule.
multi-modal CCG. Section 5 concludes the paper               The rules in Figure 1 can be generalized into
with a discussion of the relevance of our findings.       composition rules of higher degrees. These are
                                                          defined as follows, where n  0 and ˇ is a variable
2     Combinatory Categorial Grammar                      for a sequence of n arguments.
We start by providing formal definitions for cat-
                                                            x=y yˇ ) xˇ         generalized forward composition    >n
egories, syntactic rules, and grammars, and then
                                                            yˇ xny ) xˇ         generalized backward composition   <n
discuss the relevance of rule restrictions for CCG.
                                                          We call the value n the degree of the composition
2.1    Categories
                                                          rule. Note that the rules in Figure 1 are the special
Given a finite set A of atomic categories, the set of     cases for n D 0 and n D 1.
categories over A is the smallest set C such that            Apart from the core rules given in Figure 1, some
A  C , and .x=y/; .xny/ 2 C whenever x; y 2 C .          versions of CCG also use rules derived from the S
A category x=y represents a function that seeks a         and T combinators of combinatory logic, called
string with category y to the right (indicated by the     substitution and type-raising, the latter restricted
forward slash) and returns a new string with cat-         to the lexicon. However, since our main point of
egory x; a category xny instead seeks its argument        reference in this paper, the CCG formalism defined
to the left (indicated by the backward slash). In         by Vijay-Shanker and Weir (1994), does not use
the remainder of this paper, we use lowercase sans-       such rules, we will not consider them here, either.
serif letters such as x; y; z as variables for categor-
ies, and the vertical bar j as a variable for slashes.      2.3   Grammars and Derivations
In order to save some parentheses, we understand          With the set of rules in place, we can define a
slashes as left-associative operators, and write a        pure combinatory categorial grammar (PCCG) as
category such as .x=y/nz as x=ynz.                        a construct G D .A; ˙; L; s/, where A is an alpha-
   The list of arguments of a category c is defined       bet of atomic categories, s 2 A is a distinguished
recursively as follows: If c is atomic, then it has no    atomic category called the final category, ˙ is a
arguments. If c D xjy for some categories x and y,        finite set of terminal symbols, and L is a finite rela-
then the arguments of c are the slashed category jy,      tion between symbols in ˙ and categories over A,
plus the arguments of x. We number the arguments          called the lexicon. The elements of the lexicon L
of a category from outermost to innermost. The            are called lexicon entries, and we represent them
arity of a category is the number of its arguments.       using the notation  ` x, where  2 ˙ and x
The target of a category c is the atomic category         is a category over A. A category that occurs in a
that remains when stripping c of its arguments.           lexicon entry is called a lexical category.


                                                      535


   A derivation in a grammar G can be represen-              2.5    Rule Restrictions
ted as a derivation tree as follows. Given a string
                                                         The rule set of pure CCG is universal: the differ-
w 2 ˙  , we choose a lexicon entry for each oc-
                                                         ence between the grammars of different languages
currence of a symbol in w, line up the respective
                                                         should be restricted to different choices of categor-
lexical categories from left to right, and apply ad-
                                                         ies in the lexicon. This is what makes pure CCG
missible rules to adjacent pairs of categories. After
                                                         a lexicalized grammar formalism (Steedman and
the application of a rule, only the conclusion is
                                                         Baldridge, 2010). However, most practical CCG
available for future applications. We iterate this
                                                         grammars rely on the possibility to exclude or re-
process until we end up with a single category. The
                                                         strict certain rules. For example, Steedman (2001)
string w is called the yield of the resulting deriva-
                                                         bans the rule of forward crossed composition from
tion tree. A derivation tree is complete, if the last
                                                         his grammar of English, and stipulates that the rule
category is the final category of G. The language
                                                         of backward crossed composition may be applied
generated by G, denoted by L.G/, is formed by
                                                         only if both of its premises share the common tar-
the yields of all complete derivation trees.
                                                         get category s, representing sentences. Exclusions
2.4   Degree Restrictions                                and restrictions of rules are also assumed in much
                                                         of the language-theoretic work on CCG. In partic-
Work on CCG generally assumes an upper bound
                                                         ular, they are essential for the formalism used in
on the degree of composition rules that can be used
                                                         the aforementioned equivalence proof for CCG and
in derivations. We also employ this restriction, and
                                                         TAG (Vijay-Shanker and Weir, 1994).
only consider grammars with compositions of some
bounded (but arbitrary) degree n  0.1 CCG with             To illustrate the formal relevance of rule restric-
unbounded-degree compositions is more express-           tions, suppose that we wanted to write a pure CCG
ive than bounded-degree CCG or TAG (Weir and             that generates the language
Joshi, 1988).                                                             L3 D f a n b n c n j n  1 g ,
   Bounded-degree grammars have a number of
useful properties, one of which we mention here.         which is not context-free. An attempt could be
The following lemma rephrases Lemma 3.1 in                           G1 D .f s; a; b; c g; f a; b; c g; L; s/ ,
Vijay-Shanker and Weir (1994).
                                                         where the lexicon L is given as follows:
Lemma 1 For every grammar G, every argument
in a derivation of G is the argument of some lexical                   a ` a , b ` s=cna , b ` b=cna ,
category of G.                                                       b ` s=c=bna , b ` s=c=bna , c ` c .
   As a consequence, there is only a finite number       From a few sample derivations like the one given
of categories that can occur as arguments in some        in Figure 2a, we can convince ourselves that G1
derivation. In the presence of a bound on the degree     generates all strings of the form an b n c n , for any
of composition rules, this implies the following:        n  1. However, a closer inspection reveals that it
Lemma 2 For every grammar G, there is a finite           also generates other, unwanted strings—in partic-
number of categories that can occur as secondary         ular, strings of the form .ab/n c n , as witnessed by
premises in derivations of G.                            the derivation given in Figure 2b.
Proof. The arity of a secondary premise c can be            Now suppose that we would have a way to only
written as m C n, where m is the arity of the first      allow those instances of generalized composition in
argument of the corresponding primary premise,           which the secondary premise has the form b=c=bna
and n is the degree of the rule applied. Since each      or b=cna. Then the compositions
argument is an argument of some lexical category                   b=c=b b=c 1                 s=c=b b=c 1
                                                                                       and
of G (Lemma 1), and since n is assumed to be                          b=c=c >                     s=c=c >
bounded, both m and n are bounded. Hence, there
is a bound on the number of choices for c.               would be disallowed, and it is not hard to see
                                                  
                                                         that G1 would generate exactly an b n c n .
Note that the number of categories that can occur          As we will show in this paper, our attempt to
as primary premises is generally unbounded even          capture L3 with a pure CCG grammar failed not
in a grammar with bounded degree.                        only because we could not think of one: L3 cannot
  1 For   practical grammars, n  4.                     be generated by any pure CCG.


                                                       536


       a                a           a                b                b                    b                c                   c                     c
       ..               ..          ..               ..               ..                   ..               ..                  ..                    ..
        ..               ..          .                .                ..                   ..               ..                  ..                    ..
         ..               ..        a             s=c=bna               ..                   ..               ..                  ..                    ..
          ..
           ..
                           ..
                            ..                               <0          .                    ..
                                                                                               ..
                                                                                                               ..
                                                                                                                ..
                                                                                                                                   ..
                                                                                                                                    ..
                                                                                                                                                         ..
                                                                                                                                                          ..
                                              s=c=b               b=c=bna
            ..
             ..
                             .                                                >3                ..
                                                                                                 ..
                                                                                                                 ..
                                                                                                                  ..
                                                                                                                                     ..
                                                                                                                                      ..
                                                                                                                                                           ..
                                                                                                                                                            ..
                        a                               s=c=c=bna    0
              ..                                                   <                              .                ..                  ..                    ..
               ..                          s=c=c=b                                       b=cna                      ..                  ..                    ..
                .                                                                                      >2            ..
                                                                                                                      ..
                                                                                                                                         ..
                                                                                                                                          ..
                                                                                                                                                               ..
                                                                                                                                                                ..
       a                                                      s=c=c=cna
                                                                           <0                                          .                   ..
                                                                                                                                            ..
                                                                                                                                                                 ..
                                                                                                                                                                  ..
                                         s=c=c=c                                                            c
                                                                                                                           >0                .                     ..
                                                                                                                                                                    ..
                                                                     s=c=c                                                      c
                                                                                                                                                 >0                  .
                                                                                                 s=c                                                  c
                                                                                                                                                                         >0
                                                                                                                           s
                                                   (a) Derivation of the string aaabbbccc.

       a                   b                 a           b                a                b                c                   c                     c
       ..                  ..                ..          ..               ..               ..               ..                  ..                    ..
        ..                  ..                .           .                .                .                ..                  ..                    ..
         ..                  ..              a        b=c=bna             a              b=cna                ..                  ..                    ..
          ..
           ..
                              ..
                               ..                                  <0                                  <0      ..
                                                                                                                ..
                                                                                                                                   ..
                                                                                                                                    ..
                                                                                                                                                         ..
                                                                                                                                                          ..
                                                   b=c=b                           b=c
            .                   .                                                             >1                 .                   ..
                                                                                                                                      ..
                                                                                                                                                           ..
                                                                                                                                                            ..
       a                s=c=bna                                   b=c=c                                     c
                                     <0                                                                                    >0          ..
                                                                                                                                        ..
                                                                                                                                                             ..
                                                                                                                                                              ..
                    s=c=b                                                           b=c
                                                                                              >1                                         .                     ..
                                                                                                                                                                ..
                                                    s=c=c                                                                       c
                                                                                                                                                 >0              .
                                                                                   s=c                                                                c
                                                                                                                                                                         >0
                                                                                                             s
                                                   (b) Derivation of the string abababccc.

                                           Figure 2: Two derivations of the grammar G1 .


3   The Generative Capacity of Pure CCG                                      To see that the inclusion is proper, we can go
                                                                          back to the grammar G1 that we gave in Section 2.5.
We will now develop a formal argument showing                             We have already discussed that the language L3 is
that rule restrictions increase the weak generative                       included in L.G1 /. We can also convince ourselves
capacity of CCG. We will first prove that pure CCG                        that all strings generated by the grammar G1 have
is still more expressive than context-free grammar.                       an equal number of as, bs and cs. Consider now
We will then spend the rest of this section working                       the regular language R D a b  c  . From our ob-
towards the result that pure CCG is strictly less                         servations, it follows that L.G1 / \ R D L3 . Since
expressive than CCG with rule restrictions. Our                           context-free languages are closed under intersec-
main technical result will be the following:                              tion with regular languages, we find that L.G1 /
Theorem 1 Every language that can be generated                            can be context-free only if L3 is. Since L3 is not
by a pure CCG has a Parikh-equivalent context-free                        context-free, we therefore conclude that L.G1 / is
sublanguage.                                                              not context-free, either.                        

Here, two languages L and L0 are called Parikh-
                                                                          Two things are worth noting. First, our result shows
equivalent if every string in L is the permutation
                                                                          that the ability of CCG to generate non-context-free
of a string in L0 and vice versa.
                                                                          languages does not hinge on the availability of sub-
3.1 CFG ¨ PCCG                                                            stitution and type-raising rules: The derivations
                                                                          of G1 only use generalized compositions. Neither
Proposition 1 The class of languages generated                            does it require the use of functional argument cat-
by pure CCG properly includes the class of context-                       egories: The grammar G1 is first-order in the sense
free languages.                                                           of Koller and Kuhlmann (2009).
Proof. To see the inclusion, it suffices to note that                        Second, it is important to note that if the com-
pure CCG when restricted to application rules is                          position degree n is restricted to 0 or 1, pure CCG
the same as AB-grammar, the classical categorial                          actually collapses to context-free expressive power.
formalism investigated by Ajdukiewicz and Bar-                            This is clear for n D 0 because of the equivalence
Hillel (Bar-Hillel et al., 1964). This formalism is                       to AB grammar. For n D 1, observe that the arity
weakly equivalent to context-free grammar.                                of the result of a composition is at most as high as


                                                                    537


that of each premise. This means that the arity of       atomic category, ˛ is a sequence of inactive argu-
any derived category is bounded by the maximal           ments, and ˇ is a sequence of active arguments.
arity of lexical categories in the grammar, which
                                                         Proof. The proof is by induction on the depth of a
together with Lemma 1 implies that there is only
                                                         node in the derivation. The property holds for the
a finite set of derivable categories. The set of all
                                                         root (which is labeled with the final category), and
valid derivations can then be simulated by a con-
                                                         is transferred from conclusions to premises.       
text-free grammar. In the presence of rules with
n  2, the arities of derived categories can grow        3.3   Transformation
unboundedly.
                                                       The fundamental reason for why the example gram-
3.2   Active and Inactive Arguments                    mar G1 from Section 2.5 overgenerates is that in
In the remainder of this section, we will develop      the absence of rule restrictions, we have no means
the proof of Theorem 1, and use it to show that the    to control the point in a derivation at which a cat-
generative capacity of PCCG is strictly smaller than   egory combines with its arguments. Consider the
that of CCG with rule restrictions. For the proof,     examples in Figure 2: It is because we cannot en-
we adopt a certain way to view the information         sure that the bs finish combining with the other bs
flow in CCG derivations. Consider the following        before combining with the cs that the undesirable
instance of forward harmonic composition:              word order in Figure 2b has a derivation. To put
                 a=b b=c ) a=c                         it as a slogan: Permuting the words allows us to
                                                       saturate arguments prematurely.
This rule should be understood as obtaining its con-
                                                          In this section, we show that this property applies
clusion a=c from the primary premise a=b by the
                                                       to all pure CCGs. More specifically, we show that,
removal of the argument =b and the subsequent
                                                       in a derivation of a pure CCG, almost all active
transfer of the argument =c from the secondary
                                                       arguments of a category can be saturated before
premise. With this picture in mind, we will view
                                                       that category is used as a secondary premise; at
the two occurrences of =c in the secondary premise
                                                       most one active argument must be transferred to
and in the conclusion as two occurrences of one
                                                       the conclusion of that premise. Conversely, any
and the same argument. Under this perspective,
                                                       derivation that still contains a category with at least
in a given derivation, an argument has a lifespan
                                                       two active arguments can be transformed into a
that starts in a lexical category and ends in one
                                                       new derivation that brings us closer to the special
of two ways: either in the primary or in the sec-
                                                       property just characterized.
ondary premise of a composition rule. If it ends
                                                          We formalize this transformation by means of a
in a primary premise, it is because it is matched
                                                       system of rewriting rules in the sense of Baader and
against a subcategory of the corresponding second-
                                                       Nipkow (1998). The rules are given in Figure 3. To
ary premise; this is the case for the argument =b
                                                       see how they work, let us consider the first rule, R1;
in the example above. We will refer to such argu-
                                                       the other ones are symmetric. This rules states that,
ments as active. If an argument ends its life in a
                                                       whenever we see a derivation in which a category
secondary premise, it is because it is consumed as
                                                       of the form x=y (here marked as A) is combined
part of a higher-order argument. This is the case
                                                       with a category of the form yˇ=z (marked as B),
for the argument =c in the secondary premise of
                                                       and the result of this combination is combined with
the following rule instance:
                                                       a category of the form z (C), then the resulting
              a=.b=c/ b=c=d ) a=d                      category can also be obtained by ‘rotating’ the de-
(Recall that we assume that slashes are left-associ-   rivation to first saturate =z by combining B with C,
ative.) We will refer to such arguments as inactive.   and only then do the combination with A. When ap-
Note that the status of an argument as either active   plying these rotations exhaustively, we end up with
or inactive is not determined by the grammar, but      a derivation in which almost all active arguments of
depends on a concrete derivation.                      a category are saturated before that category is used
   The following lemma states an elementary prop-      as a secondary premise. Applying the transform-
erty in connection with active and inactive argu-      ation to the derivation in Figure 2a, for instance,
ments, which we will refer to as segmentation:         yields the derivation in Figure 2b.
Lemma 3 Every category that occurs in a CCG               We need the following result for some of the
derivation has the general form a˛ˇ, where a is an     lemmas we prove below. We call a node in a deriv-


                                                   538


 A   x=y B yˇ=z                         yˇ=z z           B   yˇ=z A xny                      yˇ=z z
                             R1                                                         R2
        xˇ=z         C   z   H) x=y       yˇ                   xˇ=z            C   z   H)      yˇ           xny
             xˇ                        xˇ                            xˇ                           xˇ
          A    x=y B yˇnz                z     yˇnz                 Byˇnz A xny              z     yˇnz
                             R3                                                         R4
  C   z           xˇnz       H) x=y          yˇ          C    z        xˇnz            H)        yˇ         xny
          xˇ                            xˇ                         xˇ                                xˇ


Figure 3: Rewriting rules used in the transformation. Here, represents a (possibly empty) sequence of
arguments, and ˇ represents a sequence of arguments in which the first (outermost) argument is active.


ation critical if its corresponding category contains        which corresponds to the conclusion of a composi-
more than one active argument and it is the second-          tion rule, let m; n be the numbers assigned to the
ary premise of a rule. We say that u is a highest            nodes corresponding to the primary and second-
critical node if there is no other critical node whose       ary premise, respectively. Then u is assigned the
distance to the root is shorter.                             number 1 C 2m C n. Suppose now that we have as-
Lemma 4 If u is a highest critical node, then we             sociated premise A with the number x, premise B
can apply one of the transformation rules to the             with the number y, and premise C with the num-
grandparent of u.                                            ber z. It is then easy to verify that the conclusion
                                                             of the partial derivation on the left-hand side of
Proof. Suppose that the category at u has the form           each rule has the value 3 C 4x C 2y C z, while
yˇ=z, where =z is an active argument, and the first          the conclusion of the right-hand side has the value
argument in ˇ is active as well. (The other possible         2 C 2x C 2y C z. Thus, each step decreases the
case, in which the relevant occurrence has the form          value of a derivation tree under our assignment by
yˇnz, can be treated symmetrically.) Since u is a            the amount 1 C 2x. Since this value is positive for
secondary premise, it is involved in an inference of         all choices of x, the rewriting ends after a finite
one of the following two forms:                              number of steps.                                   
          x=y yˇ=z           yˇ=z xny
             xˇ=z              xˇ=z                          To convince ourselves that our transformation does
                                                             not create ill-formed derivations, we need to show
Since u is a highest critical node, the conclusion           that none of the rewriting rules necessitates the use
of this inference is not a critical node itself; in          of composition operations whose degree is higher
particular, it is not a secondary premise. Therefore,        than the degree of the operations used in the ori-
the above inferences can be extended as follows:             ginal derivation.
    x=y yˇ=z                   yˇ=z xny
       xˇ=z           z           xˇ=z       z               Lemma 6 Applying the rewriting rules from the
              xˇ                       xˇ                    top down does not increase the degree of the com-
                                                             position operations.
These partial derivations match the left-hand side of
the rewriting rules R1 and R2, respectively. Hence,          Proof. The first composition rule used in the left-
we can apply a rewriting rule to the derivation.            hand side of each rewriting rule has degree jˇj C 1,
                                                             the second rule has degree j j; the first rule used in
We now show that the transformation is well-
                                                             the right-hand side has degree j j, the second rule
defined, in the sense that it terminates and trans-
                                                             has degree jˇj C j j. To prove the claim, it suffices
forms derivations of a grammar G into new deriva-
                                                             to show that j j  1. This is a consequence of the
tions of G.
                                                             following two observations.
Lemma 5 The rewriting of a derivation tree ends
                                                               1. In the category xˇ , the arguments in occur
after a finite number of steps.
                                                             on top of the arguments in ˇ, the first of which is
Proof. We assign natural numbers to the nodes                active. Using the segmentation property stated in
of a derivation tree as follows. Each leaf node              Lemma 3, we can therefore infer that does not
is assigned the number 0. For an inner node u,               contain any inactive arguments.


                                                       539


   2. Because we apply rules top-down, premise B            that respect the segmentation property stated in
is a highest critical node in the derivation (by            Lemma 3. Note that, because of Lemma 7 and
Lemma 4). This means that the category at                   Lemma 1, the set of nonterminals is finite. As the
premise C contains at most one active argument;             start symbol, we use s, the final category of G.
otherwise, premise C would be a critical node                  The set of productions of GT is constructed as
closer to the root than premise B.                         follows. For each lexicon entry  ` c of G, we in-
We conclude that, if we rewrite a derivation d of G         clude all productions of the form x ! , where x
top-down until exhaustion, then we obtain a new             is some marked version of c. These productions
valid derivation d 0 . We call all derivations d 0 that     represent all valid guesses about the activity of the
we can build in this way transformed. It is easy to         arguments of c during a derivation of G. The re-
see that a derivation is transformed if and only if it      maining productions encode all valid instantiations
contains no critical nodes.                                 of composition rules, keeping track of active and
                                                            inactive arguments to prevent derivations with crit-
3.4   Properties of Transformed Derivations                 ical nodes. More specifically, they have the form
The special property established by our transform-               xˇ ! x=yC yˇ        or   xˇ ! yˇ xnyC ,
ation has consequences for the generative capacity        where the arguments in the y-part of the secondary
of pure CCG. In particular, we will now show that         premise are all marked as inactive, the sequence ˇ
the set of all transformed derivations of a given         contains at most one argument marked as active,
grammar yields a context-free language. The cru-          and the annotations of the left-hand side nonter-
cial lemma is the following:                              minal are copied over from the corresponding an-
Lemma 7 For every grammar G, there is some                notations on the right-hand side.
k  0 such that no category in a transformed                 The correctness of the construction of GT can be
derivation of G has arity greater than k.                 proved by induction on the length of a transformed
                                                          derivation of G on the one hand, and the length of
Proof. The number of inactive arguments in the
                                                          a derivation of GT on the other hand.            
primary premise of a rule does not exceed the num-
ber of inactive arguments in the conclusion. In             3.5 PCCG ¨ CCG
a transformed derivation, a symmetric property            We are now ready to prove our main result, repeated
holds for active arguments: Since each second-            here for convenience.
ary premise contains at most one active argument,
                                                            Theorem 1 Every language that can be generated
the number of active arguments in the conclusion
                                                            by a pure CCG grammar has a Parikh-equivalent
of a rule is not greater than the number of act-
                                                            context-free sublanguage.
ive arguments in its primary premise. Taken to-
gether, this implies that the arity of a category that      Proof. Let G be a pure CCG, and let LT be the
occurs in a transformed derivation is bounded by            set of yields of the transformed derivations of G.
the sum of the maximal arity of a lexical category          Inspecting the rewriting rules, it is clear that every
(which bounds the number of active arguments),              string of L.G/ is the permutation of a string in LT :
and the maximal arity of a secondary premise                the transformation only rearranges the yields. By
(which bounds the number of inactive arguments).            Lemma 8, we also know that LT is context-free.
Both of these values are bounded in G.                     Since every transformed derivation is a valid deriv-
                                                            ation of G, we have LT  L.G/.                      
Lemma 8 The yields corresponding to the set of
all transformed derivations of a pure CCG form a              As an immediate consequence, we find:
context-free language.                                      Proposition 2 The class of languages generated
Proof. Let G be a pure CCG. We construct a con-             by pure CCG cannot generate all languages that
text-free grammar GT that generates the yields of           can be generated by CCG with rule restrictions.
the set of all transformed derivations of G.                Proof. The CCG formalism considered by Vijay-
   As the set of terminals of GT , we use the set of        Shanker and Weir (1994) can generate the non-con-
terminals of G. To form the set of nonterminals, we         text-free language L3 . However, the only Parikh-
take all categories that can occur in a transformed         equivalent sublanguage of that language is L3 itself.
derivation of G, and mark each argument as either           From Theorem 1, we therefore conclude that L3
‘active’ (C) or ‘inactive’ ( ), in all possible ways        cannot be generated by pure CCG.                  



                                                      540


In the light of the equivalence result established                     x=? y y     )   x         forward application
by Vijay-Shanker and Weir (1994), this means that                      y xn? y     )   x         backward application
pure CCG cannot generate all languages that can                   x=˘ y y=˘ zˇ     )   x=˘ zˇ    forward harmonic composition
be generated by TAG.                                              x= y yn zˇ     )   xn zˇ    forward crossed composition
                                                                  yn˘ zˇ xn˘ y     )   xn˘ zˇ    backward harmonic composition
4     Multi-Modal CCG                                             y= zˇ xn y     )   x= zˇ    backward crossed composition

We now extend Theorem 1 to multi-modal CCG.                                      Figure 4: Rules in B&K-CCG.
We will see that at least for a popular version
of multi-modal CCG, the B&K-CCG formalism                         4.2    Rule Restrictions in B&K-CCG
presented by Baldridge and Kruijff (2003), the
                                                                We will now see what happens to the proof of The-
proof can be adapted quite straightforwardly. This
                                                                orem 1 in the context of pure B&K-CCG. There
means that even B&K-CCG becomes less express-
                                                                is only one point in the entire proof that could be
ive when rule restrictions are disallowed.
                                                                damaged by the introduction of slash types, and
4.1    Multi-Modal CCG                                          that is the result that if a transformation rule from
                                                                Figure 3 is applied to a correct derivation, then the
The term ‘multi-modal CCG’ (MM-CCG) refers to                   result is also grammatical. For this, it must not
a family of extensions to CCG which attempt to                  only be the case that the degree on the composition
bring some of the expressive power of Categorial                operations is preserved (Lemma 6), but also that
Type Logic (Moortgat, 1997) into CCG. Slashes in                the transformed derivation remains consistent with
MM-CCG have slash types, and rules can be restric-              the slash types. Slash types make the derivation
ted to only apply to arguments that have slashes                process sensitive to word order by restricting the
of the correct type. The idea behind this extension             use of compositions to categories with the appropri-
is that many constraints that in ordinary CCG can               ate type, and the transformation rules permute the
only be expressed in terms of rule restrictions can             order of the words in the string. There is a chance
now be specified in the lexicon entries by giving               therefore that a transformed derivation might not
the slashes the appropriate types.                              be grammatical in B&K-CCG.
   The most widely-known version of multi-modal                    We now show that this does not actually happen,
CCG is the formalism defined by Baldridge and                   for rule R3; the other three rules are analogous.
Kruijff (2003) and used by Steedman and Baldridge               Using s1 ; s2 ; s3 as variables for the relevant slash
(2010); we refer to it as B&K-CCG. This formalism               types, rule R3 appears in B&K-CCG as follows:
uses an inventory of four slash types, f ?; ; ˘;  g,
arranged in a simple type hierarchy: ? is the most                      x=s1 y    yjs2 wˇns3 z   R3
                                                                                                             z   yjs2 wˇns3 z
                                                                  z         xjs2 wˇns3 z         H) x= y         yjs2 wˇ
general type,  the most specific, and  and ˘ are                                                    s1

in between. Every slash in a B&K-CCG lexicon is                          xjs2 wˇ                           xjs2 wˇ
annotated with one of these slash types.                          Because the original derivation is correct, we know
   The combinatory rules in B&K-CCG, given in                     that, if the slash of w is forward, then s1 and s2 are
Figure 4, are defined to be sensitive to the slash                subtypes of ˘; if the slash is backward, they are
types. In particular, slashes with the types ˘ and               subtypes of . A similar condition holds for s3 and
can only be eliminated by harmonic and crossed                    the first slash in ; if is empty, then s3 can be
compositions, respectively.2 Thus, a grammar                      anything because the second rule is an application.
writer can constrain the application of harmonic                     After the transformation, the argument =s1 y is
and crossed composition rules to certain categor-                 used to compose with yjs2 wˇ . The direction of
ies by assigning appropriate types to the slashes                 the slash in front of the w is the same as before,
of this category in the lexicon. Application rules                so the (harmonic or crossed) composition is still
apply to slashes of any type. As before, we call                  compatible with the slash types s1 and s2 . An
an MM-CCG grammar pure if it only uses applic-                    analogous argument shows that the correctness of
ation and generalized compositions, and does not                  combining ns3 z with carries over from the left to
provide means to restrict rule applications.                      the right-hand side. Thus the transformation maps
    2 Our
                                                                  grammatical derivations into grammatical deriva-
         definitions of generalized harmonic and crossed com-
position are the same as the ones used by Hockenmaier and         tions. The rest of the proof in Section 3 continues
Young (2008), but see the discussion in Section 4.3.              to work literally, so we have the following result:


                                                            541


Theorem 2 Every language that can be generated           position is sometimes only accepted as harmonic
by a pure B&K-CCG grammar contains a Parikh-             if all slashes of the secondary argument are for-
equivalent context-free sublanguage.                     ward (see e.g. Baldridge (2002) (40, 41), Steedman
                                                         (2001) (19)). At the same time, based on the prin-
   This means that pure B&K-CCG is just as unable
                                                         ciple that CCG rules should be derived from proofs
to generate L3 as pure CCG is. In other words,
                                                         of Categorial Type Logic as Baldridge (2002) does,
the weak generative capacity of CCG with rule
                                                         it can be argued that generalized composition rules
restrictions, and in particular that of the formalism
                                                         of the form x=y y=znw ) x=znw, which we
considered by Vijay-Shanker and Weir (1994), is
                                                         have considered as harmonic, should actually be
strictly greater than the generative capacity of pure
                                                         classified as crossed, due to the presence of a slash
B&K-CCG—although we conjecture (but cannot
                                                         of opposite directionality in front of the w. This
prove) that pure B&K-CCG is still more expressive
                                                         definition would break our proof. Thus our res-
than pure non-modal CCG.
                                                         ult might motivate further research on the ‘correct’
4.3   Towards More Expressive MM-CCGs                    definition of generalized composition rules, which
                                                         might then strengthen the generative capacity of
To put the result of Theorem 2 into perspective, we      pure MM-CCG.
will now briefly consider ways in which B&K-CCG
might be modified in order to obtain a pure multi-         5   Conclusion
modal CCG that is weakly equivalent to CCG in
                                                         In this paper, we have shown that the weak generat-
the style of Vijay-Shanker and Weir (1994). Such
                                                         ive capacity of pure CCG and even pure B&K-CCG
a modification would have to break the proof in
                                                         crucially depends on the ability to restrict the ap-
Section 4.2, which is harder than it may seem at
                                                         plication of individual rules. This means that these
first glance. For instance, simply assuming a more
                                                         formalisms cannot be fully lexicalized, in the sense
complex type system will not do it, because the
                                                         that certain languages can only be described by
arguments ns3 z and =s1 y are eliminated using the
                                                         selecting language-specific rules.
same rules in the original and the transformed deriv-
                                                            Our result generalizes Koller and Kuhlmann’s
ations, so if the derivation step was valid before, it
                                                         (2009) result for pure first-order CCG. Our proof
will still be valid after the transformation. Instead,
                                                         is not as different as it looks at first glance, as
we believe that it is necessary to make the composi-
                                                         their construction of mapping a CCG derivation to
tion rules sensitive to the categories inside ˇ and
                                                         a valency tree and back to a derivation provides a
instead of only the arguments ns3 z and =s1 y, and
                                                         different transformation on derivation trees. Our
we can see two ways how to do this.
                                                         transformation is also technically related to the nor-
    First, one could imagine a version of multi-
                                                         mal form construction for CCG parsing presented
modal CCG with unary modalities that can be used
                                                         by Eisner (1996).
to mark certain category occurrences. In such an
                                                            Of course, at the end of the day, the issue that is
MM-CCG, the composition rules for a certain slash
                                                         more relevant to computational linguistics than a
type could be made sensitive to the presence or
                                                         formalism’s ability to generate artificial languages
absence of unary modalities in ˇ. Say for instance
                                                         such as L3 is how useful it is for modeling natural
that the slash type s1 in the modalized version of
                                                         languages. CCG, and multi-modal CCG in partic-
R3 in Section 4.2 would require that no category in
                                                         ular, has a very good track record for this. In this
the secondary argument is marked with the unary
                                                         sense, our formal result can also be understood as
modality ‘’, but ˇ contains a category marked
                                                         a contribution to a discussion about the expressive
with ‘’. Then the transformed derivation would
                                                         power that is needed to model natural languages.
be ungrammatical.
    A second approach concerns the precise defin-          Acknowledgments
ition of the generalized composition rules, about        We have profited enormously from discussions with
which there is a surprising degree of disagreement.      Jason Baldridge and Mark Steedman, and would
We have followed Hockenmaier and Young (2008)            also like to thank the anonymous reviewers for their
in classifying instances of generalized forward          detailed comments.
composition as harmonic if the innermost slash of
the secondary argument is forward and crossed if
it is backward. However, generalized forward com-


                                                     542


References                                                    the European Chapter of the Association for Compu-
                                                              tational Linguistics (EACL), pages 460–468, Athens,
Franz Baader and Tobias Nipkow. 1998. Term Rewrit-            Greece.
  ing and All That. Cambridge University Press.
                                                            Michael Moortgat. 1997. Categorial type logics. In
Jason Baldridge and Geert-Jan M. Kruijff. 2003.               Handbook of Logic and Language, chapter 2, pages
   Multi-modal Combinatory Categorial Grammar.                93–177. Elsevier.
   In Proceedings of the Tenth Conference of the
   European Chapter of the Association for Compu-           David Reitter, Julia Hockenmaier, and Frank Keller.
   tational Linguistics (EACL), pages 211–218, Bud-           2006. Priming effects in combinatory categorial
   apest, Hungary.                                            grammar. In Proceedings of the 2006 Conference on
                                                              Empirical Methods in Natural Language Processing
Jason Baldridge. 2002. Lexically Specified Deriva-            (EMNLP), pages 308–316, Sydney, Australia.
   tional Control in Combinatory Categorial Grammar.
   Ph.D. thesis, University of Edinburgh.                   Mark Steedman and Jason Baldridge. 2010. Combin-
                                                             atory categorial grammar. In R. Borsley and K. Bor-
Yehoshua Bar-Hillel, Haim Gaifman, and Eli Shamir.           jars, editors, Non-Transformational Syntax. Black-
  1964. On categorial and phrase structure gram-             well. Draft 7.0, to appear.
  mars. In Language and Information: Selected Es-
  says on their Theory and Application, pages 99–115.       Mark Steedman. 2001. The Syntactic Process. MIT
  Addison-Wesley.                                            Press.
Johan Bos, Stephen Clark, Mark Steedman, James R.           K. Vijay-Shanker and David J. Weir. 1994. The equi-
  Curran, and Julia Hockenmaier. 2004. Wide-                  valence of four extensions of context-free grammars.
  coverage semantic representations from a CCG                Mathematical Systems Theory, 27(6):511–546.
  parser. In Proceedings of the 20th International
  Conference on Computational Linguistics (COL-             David J. Weir and Aravind K. Joshi. 1988. Combinat-
  ING), pages 176–182, Geneva, Switzerland.                   ory categorial grammars: Generative power and rela-
                                                              tionship to linear context-free rewriting systems. In
Stephen Clark and James Curran. 2007. Wide-                   Proceedings of the 26th Annual Meeting of the As-
   coverage efficient statistical parsing with CCG            sociation for Computational Linguistics, pages 278–
   and log-linear models. Computational Linguistics,          285, Buffalo, NY, USA.
   33(4).

Haskell B. Curry, Robert Feys, and William Craig.
  1958. Combinatory Logic. Volume 1. Studies in
  Logic and the Foundations of Mathematics. North-
  Holland.

Jason Eisner. 1996. Efficient normal-form parsing
   for combinatory categorial grammar. In Proceed-
   ings of the 34th Annual Meeting of the Association
   for Computational Linguistics (ACL), pages 79–86,
   Santa Cruz, CA, USA.

Julia Hockenmaier and Mark Steedman. 2002. Gen-
   erative models for statistical parsing with Combin-
   atory Categorial Grammar. In Proceedings of the
   40th Annual Meeting of the Association for Com-
   putational Linguistics (ACL), pages 335–342, Phil-
   adelphia, USA.

Julia Hockenmaier and Peter Young. 2008. Non-local
   scrambling: the equivalence of TAG and CCG revis-
   ited. In Proceedings of the 9th Internal Workshop on
   Tree Adjoining Grammars and Related Formalisms
  (TAG+9), Tübingen, Germany.

Aravind K. Joshi and Yves Schabes. 1997. Tree-
  Adjoining Grammars. In Grzegorz Rozenberg and
  Arto Salomaa, editors, Handbook of Formal Lan-
  guages, volume 3, pages 69–123. Springer.

Alexander Koller and Marco Kuhlmann. 2009. De-
  pendency trees and the strong generative capacity of
  CCG. In Proceedings of the Twelfth Conference of


                                                      543
